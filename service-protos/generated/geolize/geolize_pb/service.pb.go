// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: geolize/service.proto

package geolize_pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_geolize_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{0}
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_geolize_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{1}
}

type Continent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Names         map[string]string      `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Continent) Reset() {
	*x = Continent{}
	mi := &file_geolize_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Continent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Continent) ProtoMessage() {}

func (x *Continent) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Continent.ProtoReflect.Descriptor instead.
func (*Continent) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{2}
}

func (x *Continent) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Continent) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Country struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	IsoCode           string                 `protobuf:"bytes,1,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names             map[string]string      `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsInEuropeanUnion bool                   `protobuf:"varint,3,opt,name=is_in_european_union,json=isInEuropeanUnion,proto3" json:"is_in_european_union,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Country) Reset() {
	*x = Country{}
	mi := &file_geolize_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{3}
}

func (x *Country) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *Country) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Country) GetIsInEuropeanUnion() bool {
	if x != nil {
		return x.IsInEuropeanUnion
	}
	return false
}

type Location struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Latitude       float64                `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64                `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	AccuracyRadius uint32                 `protobuf:"varint,3,opt,name=accuracy_radius,json=accuracyRadius,proto3" json:"accuracy_radius,omitempty"`
	TimeZone       string                 `protobuf:"bytes,4,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_geolize_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{4}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Location) GetAccuracyRadius() uint32 {
	if x != nil {
		return x.AccuracyRadius
	}
	return 0
}

func (x *Location) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

type Subdivision struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsoCode       string                 `protobuf:"bytes,1,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names         map[string]string      `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subdivision) Reset() {
	*x = Subdivision{}
	mi := &file_geolize_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subdivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subdivision) ProtoMessage() {}

func (x *Subdivision) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subdivision.ProtoReflect.Descriptor instead.
func (*Subdivision) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{5}
}

func (x *Subdivision) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *Subdivision) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Postal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Postal) Reset() {
	*x = Postal{}
	mi := &file_geolize_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Postal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Postal) ProtoMessage() {}

func (x *Postal) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Postal.ProtoReflect.Descriptor instead.
func (*Postal) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{6}
}

func (x *Postal) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type City struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         map[string]string      `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *City) Reset() {
	*x = City{}
	mi := &file_geolize_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *City) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*City) ProtoMessage() {}

func (x *City) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use City.ProtoReflect.Descriptor instead.
func (*City) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{7}
}

func (x *City) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type RepresentedCountry struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	IsoCode           string                 `protobuf:"bytes,1,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names             map[string]string      `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type              string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	IsInEuropeanUnion bool                   `protobuf:"varint,4,opt,name=is_in_european_union,json=isInEuropeanUnion,proto3" json:"is_in_european_union,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RepresentedCountry) Reset() {
	*x = RepresentedCountry{}
	mi := &file_geolize_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepresentedCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepresentedCountry) ProtoMessage() {}

func (x *RepresentedCountry) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepresentedCountry.ProtoReflect.Descriptor instead.
func (*RepresentedCountry) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{8}
}

func (x *RepresentedCountry) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *RepresentedCountry) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *RepresentedCountry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RepresentedCountry) GetIsInEuropeanUnion() bool {
	if x != nil {
		return x.IsInEuropeanUnion
	}
	return false
}

type RegisteredCountry struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	IsoCode           string                 `protobuf:"bytes,1,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	Names             map[string]string      `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsInEuropeanUnion bool                   `protobuf:"varint,3,opt,name=is_in_european_union,json=isInEuropeanUnion,proto3" json:"is_in_european_union,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RegisteredCountry) Reset() {
	*x = RegisteredCountry{}
	mi := &file_geolize_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisteredCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredCountry) ProtoMessage() {}

func (x *RegisteredCountry) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredCountry.ProtoReflect.Descriptor instead.
func (*RegisteredCountry) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{9}
}

func (x *RegisteredCountry) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *RegisteredCountry) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *RegisteredCountry) GetIsInEuropeanUnion() bool {
	if x != nil {
		return x.IsInEuropeanUnion
	}
	return false
}

type Traits struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IsAnonymousProxy    bool                   `protobuf:"varint,1,opt,name=is_anonymous_proxy,json=isAnonymousProxy,proto3" json:"is_anonymous_proxy,omitempty"`
	IsAnycast           bool                   `protobuf:"varint,2,opt,name=is_anycast,json=isAnycast,proto3" json:"is_anycast,omitempty"`
	IsSatelliteProvider bool                   `protobuf:"varint,3,opt,name=is_satellite_provider,json=isSatelliteProvider,proto3" json:"is_satellite_provider,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Traits) Reset() {
	*x = Traits{}
	mi := &file_geolize_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Traits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traits) ProtoMessage() {}

func (x *Traits) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traits.ProtoReflect.Descriptor instead.
func (*Traits) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{10}
}

func (x *Traits) GetIsAnonymousProxy() bool {
	if x != nil {
		return x.IsAnonymousProxy
	}
	return false
}

func (x *Traits) GetIsAnycast() bool {
	if x != nil {
		return x.IsAnycast
	}
	return false
}

func (x *Traits) GetIsSatelliteProvider() bool {
	if x != nil {
		return x.IsSatelliteProvider
	}
	return false
}

type IPInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Ip                 string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	DbVersion          string                 `protobuf:"bytes,2,opt,name=db_version,json=dbVersion,proto3" json:"db_version,omitempty"`
	Continent          *Continent             `protobuf:"bytes,3,opt,name=continent,proto3" json:"continent,omitempty"`
	Country            *Country               `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Location           *Location              `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Subdivisions       []*Subdivision         `protobuf:"bytes,6,rep,name=subdivisions,proto3" json:"subdivisions,omitempty"`
	RepresentedCountry *RepresentedCountry    `protobuf:"bytes,7,opt,name=represented_country,json=representedCountry,proto3" json:"represented_country,omitempty"`
	RegisteredCountry  *RegisteredCountry     `protobuf:"bytes,8,opt,name=registered_country,json=registeredCountry,proto3" json:"registered_country,omitempty"`
	Traits             *Traits                `protobuf:"bytes,9,opt,name=traits,proto3" json:"traits,omitempty"`
	Postal             *Postal                `protobuf:"bytes,10,opt,name=postal,proto3" json:"postal,omitempty"`
	City               *City                  `protobuf:"bytes,11,opt,name=city,proto3" json:"city,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *IPInfo) Reset() {
	*x = IPInfo{}
	mi := &file_geolize_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPInfo) ProtoMessage() {}

func (x *IPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPInfo.ProtoReflect.Descriptor instead.
func (*IPInfo) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{11}
}

func (x *IPInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPInfo) GetDbVersion() string {
	if x != nil {
		return x.DbVersion
	}
	return ""
}

func (x *IPInfo) GetContinent() *Continent {
	if x != nil {
		return x.Continent
	}
	return nil
}

func (x *IPInfo) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *IPInfo) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *IPInfo) GetSubdivisions() []*Subdivision {
	if x != nil {
		return x.Subdivisions
	}
	return nil
}

func (x *IPInfo) GetRepresentedCountry() *RepresentedCountry {
	if x != nil {
		return x.RepresentedCountry
	}
	return nil
}

func (x *IPInfo) GetRegisteredCountry() *RegisteredCountry {
	if x != nil {
		return x.RegisteredCountry
	}
	return nil
}

func (x *IPInfo) GetTraits() *Traits {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *IPInfo) GetPostal() *Postal {
	if x != nil {
		return x.Postal
	}
	return nil
}

func (x *IPInfo) GetCity() *City {
	if x != nil {
		return x.City
	}
	return nil
}

type LookupIPRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ips           []string               `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupIPRequest) Reset() {
	*x = LookupIPRequest{}
	mi := &file_geolize_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupIPRequest) ProtoMessage() {}

func (x *LookupIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupIPRequest.ProtoReflect.Descriptor instead.
func (*LookupIPRequest) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{12}
}

func (x *LookupIPRequest) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type LookupIPResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*IPInfo              `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupIPResponse) Reset() {
	*x = LookupIPResponse{}
	mi := &file_geolize_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupIPResponse) ProtoMessage() {}

func (x *LookupIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupIPResponse.ProtoReflect.Descriptor instead.
func (*LookupIPResponse) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{13}
}

func (x *LookupIPResponse) GetData() []*IPInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ModifyIPRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Ip                 string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Continent          *Continent             `protobuf:"bytes,2,opt,name=continent,proto3" json:"continent,omitempty"`
	Country            *Country               `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Location           *Location              `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Subdivisions       []*Subdivision         `protobuf:"bytes,5,rep,name=subdivisions,proto3" json:"subdivisions,omitempty"`
	RepresentedCountry *RepresentedCountry    `protobuf:"bytes,6,opt,name=represented_country,json=representedCountry,proto3" json:"represented_country,omitempty"`
	RegisteredCountry  *RegisteredCountry     `protobuf:"bytes,7,opt,name=registered_country,json=registeredCountry,proto3" json:"registered_country,omitempty"`
	Traits             *Traits                `protobuf:"bytes,8,opt,name=traits,proto3" json:"traits,omitempty"`
	Postal             *Postal                `protobuf:"bytes,9,opt,name=postal,proto3" json:"postal,omitempty"`
	City               *City                  `protobuf:"bytes,10,opt,name=city,proto3" json:"city,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ModifyIPRequest) Reset() {
	*x = ModifyIPRequest{}
	mi := &file_geolize_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyIPRequest) ProtoMessage() {}

func (x *ModifyIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyIPRequest.ProtoReflect.Descriptor instead.
func (*ModifyIPRequest) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{14}
}

func (x *ModifyIPRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ModifyIPRequest) GetContinent() *Continent {
	if x != nil {
		return x.Continent
	}
	return nil
}

func (x *ModifyIPRequest) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *ModifyIPRequest) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ModifyIPRequest) GetSubdivisions() []*Subdivision {
	if x != nil {
		return x.Subdivisions
	}
	return nil
}

func (x *ModifyIPRequest) GetRepresentedCountry() *RepresentedCountry {
	if x != nil {
		return x.RepresentedCountry
	}
	return nil
}

func (x *ModifyIPRequest) GetRegisteredCountry() *RegisteredCountry {
	if x != nil {
		return x.RegisteredCountry
	}
	return nil
}

func (x *ModifyIPRequest) GetTraits() *Traits {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *ModifyIPRequest) GetPostal() *Postal {
	if x != nil {
		return x.Postal
	}
	return nil
}

func (x *ModifyIPRequest) GetCity() *City {
	if x != nil {
		return x.City
	}
	return nil
}

type ModifyIPResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyIPResponse) Reset() {
	*x = ModifyIPResponse{}
	mi := &file_geolize_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyIPResponse) ProtoMessage() {}

func (x *ModifyIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_geolize_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyIPResponse.ProtoReflect.Descriptor instead.
func (*ModifyIPResponse) Descriptor() ([]byte, []int) {
	return file_geolize_service_proto_rawDescGZIP(), []int{15}
}

var File_geolize_service_proto protoreflect.FileDescriptor

const file_geolize_service_proto_rawDesc = "" +
	"\n" +
	"\x15geolize/service.proto\x12\vdocument_pb\x1a+includes/openapiv2/options/annotation.proto\x1a$includes/google/api/annotation.proto\"\r\n" +
	"\vPingRequest\"\x0e\n" +
	"\fPingResponse\"\x92\x01\n" +
	"\tContinent\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x127\n" +
	"\x05names\x18\x02 \x03(\v2!.document_pb.Continent.NamesEntryR\x05names\x1a8\n" +
	"\n" +
	"NamesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc6\x01\n" +
	"\aCountry\x12\x19\n" +
	"\biso_code\x18\x01 \x01(\tR\aisoCode\x125\n" +
	"\x05names\x18\x02 \x03(\v2\x1f.document_pb.Country.NamesEntryR\x05names\x12/\n" +
	"\x14is_in_european_union\x18\x03 \x01(\bR\x11isInEuropeanUnion\x1a8\n" +
	"\n" +
	"NamesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8a\x01\n" +
	"\bLocation\x12\x1a\n" +
	"\blatitude\x18\x01 \x01(\x01R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x02 \x01(\x01R\tlongitude\x12'\n" +
	"\x0faccuracy_radius\x18\x03 \x01(\rR\x0eaccuracyRadius\x12\x1b\n" +
	"\ttime_zone\x18\x04 \x01(\tR\btimeZone\"\x9d\x01\n" +
	"\vSubdivision\x12\x19\n" +
	"\biso_code\x18\x01 \x01(\tR\aisoCode\x129\n" +
	"\x05names\x18\x02 \x03(\v2#.document_pb.Subdivision.NamesEntryR\x05names\x1a8\n" +
	"\n" +
	"NamesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x1c\n" +
	"\x06Postal\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\"t\n" +
	"\x04City\x122\n" +
	"\x05names\x18\x01 \x03(\v2\x1c.document_pb.City.NamesEntryR\x05names\x1a8\n" +
	"\n" +
	"NamesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf0\x01\n" +
	"\x12RepresentedCountry\x12\x19\n" +
	"\biso_code\x18\x01 \x01(\tR\aisoCode\x12@\n" +
	"\x05names\x18\x02 \x03(\v2*.document_pb.RepresentedCountry.NamesEntryR\x05names\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12/\n" +
	"\x14is_in_european_union\x18\x04 \x01(\bR\x11isInEuropeanUnion\x1a8\n" +
	"\n" +
	"NamesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xda\x01\n" +
	"\x11RegisteredCountry\x12\x19\n" +
	"\biso_code\x18\x01 \x01(\tR\aisoCode\x12?\n" +
	"\x05names\x18\x02 \x03(\v2).document_pb.RegisteredCountry.NamesEntryR\x05names\x12/\n" +
	"\x14is_in_european_union\x18\x03 \x01(\bR\x11isInEuropeanUnion\x1a8\n" +
	"\n" +
	"NamesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x89\x01\n" +
	"\x06Traits\x12,\n" +
	"\x12is_anonymous_proxy\x18\x01 \x01(\bR\x10isAnonymousProxy\x12\x1d\n" +
	"\n" +
	"is_anycast\x18\x02 \x01(\bR\tisAnycast\x122\n" +
	"\x15is_satellite_provider\x18\x03 \x01(\bR\x13isSatelliteProvider\"\xb0\x04\n" +
	"\x06IPInfo\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\x12\x1d\n" +
	"\n" +
	"db_version\x18\x02 \x01(\tR\tdbVersion\x124\n" +
	"\tcontinent\x18\x03 \x01(\v2\x16.document_pb.ContinentR\tcontinent\x12.\n" +
	"\acountry\x18\x04 \x01(\v2\x14.document_pb.CountryR\acountry\x121\n" +
	"\blocation\x18\x05 \x01(\v2\x15.document_pb.LocationR\blocation\x12<\n" +
	"\fsubdivisions\x18\x06 \x03(\v2\x18.document_pb.SubdivisionR\fsubdivisions\x12P\n" +
	"\x13represented_country\x18\a \x01(\v2\x1f.document_pb.RepresentedCountryR\x12representedCountry\x12M\n" +
	"\x12registered_country\x18\b \x01(\v2\x1e.document_pb.RegisteredCountryR\x11registeredCountry\x12+\n" +
	"\x06traits\x18\t \x01(\v2\x13.document_pb.TraitsR\x06traits\x12+\n" +
	"\x06postal\x18\n" +
	" \x01(\v2\x13.document_pb.PostalR\x06postal\x12%\n" +
	"\x04city\x18\v \x01(\v2\x11.document_pb.CityR\x04city\"#\n" +
	"\x0fLookupIPRequest\x12\x10\n" +
	"\x03ips\x18\x01 \x03(\tR\x03ips\";\n" +
	"\x10LookupIPResponse\x12'\n" +
	"\x04data\x18\x01 \x03(\v2\x13.document_pb.IPInfoR\x04data\"\x9a\x04\n" +
	"\x0fModifyIPRequest\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\x124\n" +
	"\tcontinent\x18\x02 \x01(\v2\x16.document_pb.ContinentR\tcontinent\x12.\n" +
	"\acountry\x18\x03 \x01(\v2\x14.document_pb.CountryR\acountry\x121\n" +
	"\blocation\x18\x04 \x01(\v2\x15.document_pb.LocationR\blocation\x12<\n" +
	"\fsubdivisions\x18\x05 \x03(\v2\x18.document_pb.SubdivisionR\fsubdivisions\x12P\n" +
	"\x13represented_country\x18\x06 \x01(\v2\x1f.document_pb.RepresentedCountryR\x12representedCountry\x12M\n" +
	"\x12registered_country\x18\a \x01(\v2\x1e.document_pb.RegisteredCountryR\x11registeredCountry\x12+\n" +
	"\x06traits\x18\b \x01(\v2\x13.document_pb.TraitsR\x06traits\x12+\n" +
	"\x06postal\x18\t \x01(\v2\x13.document_pb.PostalR\x06postal\x12%\n" +
	"\x04city\x18\n" +
	" \x01(\v2\x11.document_pb.CityR\x04city\"\x12\n" +
	"\x10ModifyIPResponse2\xa4\x02\n" +
	"\aGeolize\x12J\n" +
	"\x04Ping\x12\x18.document_pb.PingRequest\x1a\x19.document_pb.PingResponse\"\r\x82\xd3\xe4\x93\x02\a\x12\x05/ping\x12d\n" +
	"\bLookupIP\x12\x1c.document_pb.LookupIPRequest\x1a\x1d.document_pb.LookupIPResponse\"\x1b\x82\xd3\xe4\x93\x02\x15\x12\x13/v1/geoip/lookup-ip\x12g\n" +
	"\bModifyIP\x12\x1c.document_pb.ModifyIPRequest\x1a\x1d.document_pb.ModifyIPResponse\"\x1e\x82\xd3\xe4\x93\x02\x18:\x01*\"\x13/v1/geoip/modify-ipB}\x92Af\x12<\n" +
	"\vGeolize API\"!\n" +
	"\x05SANGO\x1a\x18sangnguyen.itp@gmail.com*\x05\n" +
	"\x03MIT2\x031.0*\x02\x01\x022\x10application/json:\x10application/jsonZ\x12geolize/geolize_pbb\x06proto3"

var (
	file_geolize_service_proto_rawDescOnce sync.Once
	file_geolize_service_proto_rawDescData []byte
)

func file_geolize_service_proto_rawDescGZIP() []byte {
	file_geolize_service_proto_rawDescOnce.Do(func() {
		file_geolize_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_geolize_service_proto_rawDesc), len(file_geolize_service_proto_rawDesc)))
	})
	return file_geolize_service_proto_rawDescData
}

var file_geolize_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_geolize_service_proto_goTypes = []any{
	(*PingRequest)(nil),        // 0: document_pb.PingRequest
	(*PingResponse)(nil),       // 1: document_pb.PingResponse
	(*Continent)(nil),          // 2: document_pb.Continent
	(*Country)(nil),            // 3: document_pb.Country
	(*Location)(nil),           // 4: document_pb.Location
	(*Subdivision)(nil),        // 5: document_pb.Subdivision
	(*Postal)(nil),             // 6: document_pb.Postal
	(*City)(nil),               // 7: document_pb.City
	(*RepresentedCountry)(nil), // 8: document_pb.RepresentedCountry
	(*RegisteredCountry)(nil),  // 9: document_pb.RegisteredCountry
	(*Traits)(nil),             // 10: document_pb.Traits
	(*IPInfo)(nil),             // 11: document_pb.IPInfo
	(*LookupIPRequest)(nil),    // 12: document_pb.LookupIPRequest
	(*LookupIPResponse)(nil),   // 13: document_pb.LookupIPResponse
	(*ModifyIPRequest)(nil),    // 14: document_pb.ModifyIPRequest
	(*ModifyIPResponse)(nil),   // 15: document_pb.ModifyIPResponse
	nil,                        // 16: document_pb.Continent.NamesEntry
	nil,                        // 17: document_pb.Country.NamesEntry
	nil,                        // 18: document_pb.Subdivision.NamesEntry
	nil,                        // 19: document_pb.City.NamesEntry
	nil,                        // 20: document_pb.RepresentedCountry.NamesEntry
	nil,                        // 21: document_pb.RegisteredCountry.NamesEntry
}
var file_geolize_service_proto_depIdxs = []int32{
	16, // 0: document_pb.Continent.names:type_name -> document_pb.Continent.NamesEntry
	17, // 1: document_pb.Country.names:type_name -> document_pb.Country.NamesEntry
	18, // 2: document_pb.Subdivision.names:type_name -> document_pb.Subdivision.NamesEntry
	19, // 3: document_pb.City.names:type_name -> document_pb.City.NamesEntry
	20, // 4: document_pb.RepresentedCountry.names:type_name -> document_pb.RepresentedCountry.NamesEntry
	21, // 5: document_pb.RegisteredCountry.names:type_name -> document_pb.RegisteredCountry.NamesEntry
	2,  // 6: document_pb.IPInfo.continent:type_name -> document_pb.Continent
	3,  // 7: document_pb.IPInfo.country:type_name -> document_pb.Country
	4,  // 8: document_pb.IPInfo.location:type_name -> document_pb.Location
	5,  // 9: document_pb.IPInfo.subdivisions:type_name -> document_pb.Subdivision
	8,  // 10: document_pb.IPInfo.represented_country:type_name -> document_pb.RepresentedCountry
	9,  // 11: document_pb.IPInfo.registered_country:type_name -> document_pb.RegisteredCountry
	10, // 12: document_pb.IPInfo.traits:type_name -> document_pb.Traits
	6,  // 13: document_pb.IPInfo.postal:type_name -> document_pb.Postal
	7,  // 14: document_pb.IPInfo.city:type_name -> document_pb.City
	11, // 15: document_pb.LookupIPResponse.data:type_name -> document_pb.IPInfo
	2,  // 16: document_pb.ModifyIPRequest.continent:type_name -> document_pb.Continent
	3,  // 17: document_pb.ModifyIPRequest.country:type_name -> document_pb.Country
	4,  // 18: document_pb.ModifyIPRequest.location:type_name -> document_pb.Location
	5,  // 19: document_pb.ModifyIPRequest.subdivisions:type_name -> document_pb.Subdivision
	8,  // 20: document_pb.ModifyIPRequest.represented_country:type_name -> document_pb.RepresentedCountry
	9,  // 21: document_pb.ModifyIPRequest.registered_country:type_name -> document_pb.RegisteredCountry
	10, // 22: document_pb.ModifyIPRequest.traits:type_name -> document_pb.Traits
	6,  // 23: document_pb.ModifyIPRequest.postal:type_name -> document_pb.Postal
	7,  // 24: document_pb.ModifyIPRequest.city:type_name -> document_pb.City
	0,  // 25: document_pb.Geolize.Ping:input_type -> document_pb.PingRequest
	12, // 26: document_pb.Geolize.LookupIP:input_type -> document_pb.LookupIPRequest
	14, // 27: document_pb.Geolize.ModifyIP:input_type -> document_pb.ModifyIPRequest
	1,  // 28: document_pb.Geolize.Ping:output_type -> document_pb.PingResponse
	13, // 29: document_pb.Geolize.LookupIP:output_type -> document_pb.LookupIPResponse
	15, // 30: document_pb.Geolize.ModifyIP:output_type -> document_pb.ModifyIPResponse
	28, // [28:31] is the sub-list for method output_type
	25, // [25:28] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_geolize_service_proto_init() }
func file_geolize_service_proto_init() {
	if File_geolize_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_geolize_service_proto_rawDesc), len(file_geolize_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_geolize_service_proto_goTypes,
		DependencyIndexes: file_geolize_service_proto_depIdxs,
		MessageInfos:      file_geolize_service_proto_msgTypes,
	}.Build()
	File_geolize_service_proto = out.File
	file_geolize_service_proto_goTypes = nil
	file_geolize_service_proto_depIdxs = nil
}
