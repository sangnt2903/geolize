// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: geolize/service.proto

package geolize_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Geolize_Ping_FullMethodName     = "/document_pb.Geolize/Ping"
	Geolize_LookupIP_FullMethodName = "/document_pb.Geolize/LookupIP"
	Geolize_ModifyIP_FullMethodName = "/document_pb.Geolize/ModifyIP"
)

// GeolizeClient is the client API for Geolize service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeolizeClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	LookupIP(ctx context.Context, in *LookupIPRequest, opts ...grpc.CallOption) (*LookupIPResponse, error)
	ModifyIP(ctx context.Context, in *ModifyIPRequest, opts ...grpc.CallOption) (*ModifyIPResponse, error)
}

type geolizeClient struct {
	cc grpc.ClientConnInterface
}

func NewGeolizeClient(cc grpc.ClientConnInterface) GeolizeClient {
	return &geolizeClient{cc}
}

func (c *geolizeClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Geolize_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolizeClient) LookupIP(ctx context.Context, in *LookupIPRequest, opts ...grpc.CallOption) (*LookupIPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookupIPResponse)
	err := c.cc.Invoke(ctx, Geolize_LookupIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolizeClient) ModifyIP(ctx context.Context, in *ModifyIPRequest, opts ...grpc.CallOption) (*ModifyIPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyIPResponse)
	err := c.cc.Invoke(ctx, Geolize_ModifyIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeolizeServer is the server API for Geolize service.
// All implementations should embed UnimplementedGeolizeServer
// for forward compatibility.
type GeolizeServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	LookupIP(context.Context, *LookupIPRequest) (*LookupIPResponse, error)
	ModifyIP(context.Context, *ModifyIPRequest) (*ModifyIPResponse, error)
}

// UnimplementedGeolizeServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeolizeServer struct{}

func (UnimplementedGeolizeServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGeolizeServer) LookupIP(context.Context, *LookupIPRequest) (*LookupIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupIP not implemented")
}
func (UnimplementedGeolizeServer) ModifyIP(context.Context, *ModifyIPRequest) (*ModifyIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyIP not implemented")
}
func (UnimplementedGeolizeServer) testEmbeddedByValue() {}

// UnsafeGeolizeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeolizeServer will
// result in compilation errors.
type UnsafeGeolizeServer interface {
	mustEmbedUnimplementedGeolizeServer()
}

func RegisterGeolizeServer(s grpc.ServiceRegistrar, srv GeolizeServer) {
	// If the following call pancis, it indicates UnimplementedGeolizeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Geolize_ServiceDesc, srv)
}

func _Geolize_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolizeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Geolize_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolizeServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geolize_LookupIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolizeServer).LookupIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Geolize_LookupIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolizeServer).LookupIP(ctx, req.(*LookupIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geolize_ModifyIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolizeServer).ModifyIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Geolize_ModifyIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolizeServer).ModifyIP(ctx, req.(*ModifyIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Geolize_ServiceDesc is the grpc.ServiceDesc for Geolize service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Geolize_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "document_pb.Geolize",
	HandlerType: (*GeolizeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Geolize_Ping_Handler,
		},
		{
			MethodName: "LookupIP",
			Handler:    _Geolize_LookupIP_Handler,
		},
		{
			MethodName: "ModifyIP",
			Handler:    _Geolize_ModifyIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geolize/service.proto",
}
